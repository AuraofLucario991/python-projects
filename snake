#imports
import random
import sys
from tkinter import *
from PIL import ImageTK, Image

class Cons:
  BOARD_WIDTH = 300
  BOARD_HEIGHT = 300
  DELAY = 100
  DOT_SIZE = 10
  MAX_RAND_POS = 27
  
class Board(Canvas):
  def__init__(self):
    super(Board, self).__init__(width=Cons.BOARD_WIDTH, height=Cons.BOARD_HEIGHT, background="black")
    self.initGame()
    self.pack()
    
  def initGame(self):
    self.inGame = True
    self.dots = 3
    self.score = 0
    
    self.moveX = Cons.DOT_SIZE
    self.moveY = 0
    
    self.appleX = 100
    self.appleY = 190
    
    self.loadImages()
    self.createObjects
    
    self.locateApple()
    
    self.bind_all("<Key>", self.onKeyPressed)
    self.after(Cons.DELAY, self.onTimer)
    
  def onTimer(self):
    self.drawSCore()
    self.checkCollision()
    if self.inGame:
      self.appleCollision()
      self.moveSnake()
      self.after(Cons.DELAY, self.onTimer)
    else:
      self.gameOver()
    
  def gameOver(self):
    pass
    
  def moveSnake(self):
    pass
   
  def appleCollision(self):
    pass
   
  def checkCollision(self):
    pass
    
  def drawSCore(self):
    pass
    
    
  def onKeyPressed(self):
     key =e.keysym
     LEFT_CURSOR_KEY = "Left"
     if key == LEFT_CURSOR_KEY and self.moveX <=0: 
      self.moveX = -Cons.DOT_SIZE
      self.moveY= 0
     RIGHT_CURSOR_KEY = "Right"
     if key == RIGHT_CURSOR_KEY and self.moveX >=0: 
      self.moveX = Cons.DOT_SIZE
      self.moveY= 0
     UP_CURSOR_KEY = "Up"
     if key == UP_CURSOR_KEY and self.moveY <=0: 
      self.moveX = 0
      self.moveY= -Cons.DOT_SIZE
    DOWN_CURSOR_KEY = "Down"
     if key == DOWN_CURSOR_KEY and self.moveY >=0: 
      self.moveX = 0
      self.moveY= Cons.DOT_SIZE
     
    
  def locateApple(self):
    apple = self.find_withtag("apple")
    self.delete(apple[0])
    rx = random.randint(0, Cons.MAX_RAND_POS)
    ry = random.randint(0, Cons.MAX_RAND_POS)
    self.appleX = rx * Cons.DOT_SIZE
    self.appleY = ry * Cons.DOT_SIZE
    self.create_image(self.appleX, self.appleY, anchor=NW, image=self.apple, tag="apple")
    
    
  def createObjects(self):
    self.create_text(30, 10, text="Score: {0}".format(self.score), tag="score", fill="white")
    self.create_Image(self.appleX, self.appleY, image=self.apple, anchor=NW, tag="apple")
    self.create_image(50, 50, image=self.head, anchor=NW, tag="head")
    self.create_image(30, 50, image=self.body, anchor=NW, tag="body")
    self.create_image(40, 50, image=self.body, anchor=NW, tag="body")
    
    
  def loadImages(self):
    try:
      self.ibody = Image.open("imgs/body1.png")
      self.ihead = Image.open("imgs/head1.png")
      self.iapple = Image.open("imgs/apple1.png")
      self.body = ImageTk.PhotoImage(self.ibody)
      self.head = ImageTk.PhotoImage(self.ihead)
      self.apple = ImageTk.PhotoImage(self.iapple)
    except IOError as e:
      print(e)
      sys.exit(1)
    
class Snake(frame):
  def __init__(self, master):
    super(Snake, self).__init__(master)
    self.master.title("Snake Clone")
    self.board = Board()
    self.pack()




def main():
  root = Tk()
  snake=Snake(root)
  root.mainloop()
main()
